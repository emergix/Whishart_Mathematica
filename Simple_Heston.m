(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



HestonPropagator[V_,\[Tau]_,\[Lambda]_,\[Theta]_,\[Nu]_,\[Rho]_,z_]:=Module[{\[Psi]p,\[Psi]m,\[Zeta],X},
\[Zeta]=Sqrt[( \[Lambda]+I z \[Rho] \[Nu])^2+\[Nu]^2(-I z+z^2)];
\[Psi]p=-(\[Lambda]+I z \[Rho] \[Nu])+\[Zeta];
\[Psi]m=( \[Lambda]+I z \[Rho] \[Nu])+\[Zeta];
A=-\[Theta] \[Lambda]/\[Nu]^2(\[Psi]p \[Tau]+2 Log[(\[Psi]m+\[Psi]p \[ExponentialE]^(-\[Zeta]  \[Tau]))/(2 \[Zeta])]);
B=-(-I z+z^2)(1-\[ExponentialE]^(-\[Zeta]  \[Tau]))/(\[Psi]m+\[Psi]p \[ExponentialE]^(-\[Zeta]  \[Tau]));
\[ExponentialE]^(A+B  V)]


FourierPayOffLNSepp[z_,k_]:=k^(\[ImaginaryI] z+1)/(z^2-\[ImaginaryI] z)


LNHestonVanillaCallIntegrand[F_,K_,z_,V_,\[Tau]_,\[Theta]_,\[Lambda]_,\[Nu]_,\[Rho]_]:=
Module[{\[Psi]p,\[Psi]m,\[Zeta],X},
Re[\[ExponentialE]^(-Log[F] I z) HestonPropagator[V,\[Tau],\[Lambda],\[Theta],\[Nu],\[Rho],z]FourierPayOffLNSepp[z,K]]]


LNHestonVanillaCall[F_,K_,V0_,\[Tau]_,\[Lambda]_,\[Theta]_,\[Nu]_,\[Rho]_,limsup_]:=
F-1/Pi NIntegrate[
LNHestonVanillaCallIntegrand[F,K,k1+I/2,V0,\[Tau],\[Theta],\[Lambda],\[Nu],\[Rho]],{k1,0,limsup},MaxRecursion->30]


LNHestonVanillaCallIntegrand2[F_,K_,z_,V_,\[Tau]_,\[Theta]_,\[Lambda]_,\[Nu]_,\[Rho]_]:=
Module[{},
Re[\[ExponentialE]^(-\[ImaginaryI] (z)Log[F]) LogNormalHestonFondamentalTransform[\[Rho],\[Lambda],\[Theta],\[Nu],V,z,\[Tau]]LogNormalCallPayOffFourierTransform[K,z]]]


HestonLogNormalCallN[\[Rho]_,\[Lambda]v_,\[Theta]v_,\[Kappa]_,V_,S0_,k_,T_]:=S0-1/\[Pi] Re[Module[{\[Lambda]=0.5,\[Omega]},
NIntegrate[\[ExponentialE]^(-\[ImaginaryI] (\[Omega] +\[Lambda] \[ImaginaryI])Log[S0]) LogNormalHestonFondamentalTransform[\[Rho],\[Lambda]v,\[Theta]v,\[Kappa],V,\[Omega]+\[ImaginaryI] \[Lambda],T]LogNormalCallPayOffFourierTransform[k,\[Omega] +\[Lambda] \[ImaginaryI]],
{\[Omega],0,1000},MaxRecursion->30]]]



